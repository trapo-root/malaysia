<style>
    /*   hide quantity seelctor of promotional and addon type products */
      #wow-cart-drawer-app .wow-cart-product-item[data-product_type="Add-On"] .wow-cart-quantity-box,
    #wow-cart-drawer-app .wow-cart-product-item[data-product_type="Promotional"] .wow-cart-quantity-box {
      display: none;
    }
      form#wowcart-cart-form{
        margin-bottom:0
      }
    #wow-cart-drawer-app .wow-cart-box-wrapper {
          height: 100% !important;
    }

    #wow-cart-drawer-app .wowcart_custom-placeholder {

      padding-left: 8px !important;
      padding-right: 8px !important;
  }

     .wow-cart-quantity__value {
    margin: unset !important;
  }

  .wow-cart-fixed-form {
  margin-bottom: unset !important;
  }

  .wow-cart-hide-item + .wowcart_custom-placeholder {
    display: none !important;
  }

     #wow-cart-drawer-app .wowcart-product-item__footer-content {

      max-width: fit-content !important;
      flex-wrap: wrap !important;
  }
     /* .wowcart-product-item__footer{
       display:none !important;
     } */
     /* .wow-cart-product-item{
       margin-bottom:10px !important;
     } */
</style>

<script
  id="wowcart-custom-script"
>

 function removeQuantitySelector(){
      const product_types =['Add-On','Promotional'];
      
          (product_types || []).forEach(type => {
          Array.from(document.querySelectorAll(`#wow-cart-drawer-app .wow-cart-product-item[data-product_type="${type}"] .wow-cart-quantity-box`) || []).forEach(ele => {
            ele.remove();
          });
        });
  }
  function removeUfeWidgetsAndRefresh() {
  // 1. Select all elements with the class 'ufe-widget'
  const ufeWidgets = document.querySelectorAll('.ufe-widget:not(.ufe-popup .ufe-widget)');

  // 2. Remove each widget from the DOM
  ufeWidgets.forEach(widget => {
    widget.remove(); 
  });

  // 3. Call the refresh function 
  if (typeof window.ufe !== 'undefined' && typeof window.ufe.refreshUpsell() === 'function') {
    window.ufe.refreshUpsell();
  } else {
    console.warn('ufe is not defined');
  }
}

  // Initialize store pickup div if not present
  function initStorePickupDiv() {
    const holder = document.querySelector('#genie-store-pickup-front-holder-drawer');
    if (!holder) {
      const div = document.createElement('div');
      div.id = 'genie-store-pickup-front-holder-drawer';
      div.dataset.storeDomain = "{{ shop.permanent_domain }}";
      console.log("div : ", div)
      const targetElement = document.querySelector('.wowcart_custom-placeholder');
      if (targetElement) {
        targetElement.appendChild(div);
        setTimeout(loadStorePickup, 0); // Assuming loadStorePickup is defined elsewhere
        console.log("initStorePickupDiv created for calling : ", targetElement)
      }
    }
  }

  // Initialize store pickup div if not present
  function initOrGetLocsStorePickup() {
    // Reinitialize the store pickup div
    if (typeof initStorePickupDiv === 'function') {
        console.log('Reinitializing Store Pickup Div');
         // var getclasscheckoutMethodName= document.getElementsByClassName("checkoutMethodName")
    // if (!getclasscheckoutMethodName || getclasscheckoutMethodName.length == 0) { 
        if ($('.genie-app .checkoutMethodName').length == 0) {
          console.log("in init genie");
          initStorePickupDiv();  
        } else if ($('.genie-app .checkoutMethodName').length > 0 && $('.genie-app .checkoutMethod.active').text() == 'Store Pickup') {
          console.log("in get loc genie");
          getGenieLocations();
        }
    } else {
        console.warn('initStorePickupDiv is not defined');
    }
  }

  //Cart Loaded event
   document.addEventListener('WOWCART_LOADED', () => {
     console.log("This is inside THE WOW CART OPEN ------------>")

     var imgUrl = "https://cdn.shopify.com/s/files/1/0234/7089/9277/files/Store-Pickup-Banner_99de990c-03b2-4921-8430-1b279ea48817.png?v=1759118211";
var $container = $('.wowcart_custom-placeholder');

// Check if the image is already present
if ($container.find('img[src="' + imgUrl + '"]').length === 0) {
  $container.prepend('<img src="' + imgUrl + '" style="width: 100%;padding-top: 10px;">');
}
     setTimeout(function () {
                if ($(".dashcam-note").length == 0) {
              $('[data-product_type="TRAPO DASHCAM"] .wow-cart-product-price-block').append('<p class="dashcam-note" style="color: red;font-size: 11px;font-weight: 700;letter-spacing: 0.4px;padding-top: 2px;">NOTE : Choose Store Pickup for free installation</p>');
                }
                }, 550);
        console.log('WOW cart loaded')
     removeUfeWidgetsAndRefresh();
        removeQuantitySelector();
        initStorePickupDiv();
      {% if customer %}
      // if(!document.querySelector('#loyalty-point')){
      //   // header
      //   const div_top = document.createElement('div');
      //     // Set Attributes on Element
      //     div_top.setAttribute('id', 'loyalty-point-top');
      //     const SELECTOR_TOP = '.slider-cart-top-bar.sider-cart-header';
      //     const element_top = document.querySelector(SELECTOR_TOP);
      //     element_top.after(div_top);
      //     const loyaltyPointElement_top = document.querySelector('#loyalty-point-top');
      //     loyaltyPointElement_top.innerHTML = `<span class="points-on-cart">You have <span data-lion-points="approved"></span> points</span><span class="plus-points-cart">(Plus, earn
      //     <span data-lion-points="cart"></span> points with this order.)`;

       
      //  // footer
          // const div = document.createElement('div');
          // // Set Attributes on Element
          // div.setAttribute('id', 'loyalty-point');
          // const SELECTOR = '.slider-cart-footer-note';
          // const element = document.querySelector(SELECTOR);
          // element.before(div);
          // const loyaltyPointElement = document.querySelector('#loyalty-point');
          // loyaltyPointElement.innerHTML = `<span class="points-on-cart">You have <span data-lion-points="approved"></span> points</span><span class="plus-points-cart">(Plus, earn
          // <span data-lion-points="cart"></span> points with this order.)`;       
        //}
        {% endif %}     
  });

  
document.addEventListener('WOWCART_PRODUCT_DELETED', function(items) { 
const cartObject = items.detail || {};
  console.log('Hii',cartObject);
   if(cartObject.item_count > 0){
      let addonProducts = ((wowcart.cartItems || {}).items || []).filter(item=>item.product_type == 'Add-On' || item.product_type == 'Promotional' || item.product_type == 'Reward')
        if((addonProducts||{}).length == (wowcart.cartItems || {}).item_count){
          (window.wowcart || {}).clearCart && (window.wowcart || {}).clearCart();
        }  
    }
  initOrGetLocsStorePickup();
});


/**
 * Trapo Auto-Add Boot Variant & Scented Stone Refill
 * 
 * This script automatically:
 * 1. Adds a free Boot variant to the cart when a Front+Rear variant is added
 * 2. Adds a matching Scented Stone Refill when a Starter Kit is purchased
 * It also removes the related items when the main items are removed.
 * It listens for the CART_UPDATED event and processes the cart items accordingly.
 */

(function() {
  // Configuration
  const DEBUG = true;
  
  // Scented Stone Product IDs
  const SCENTED_STONE_STARTER_KIT_ID = 7521713258573;
  const SCENTED_STONE_REFILL_ID = 7522021376077;
  const SCENTED_STONE_REFILL_HANDLE = 'trapo-scented-stone-refill';
  
  // Store previous cart state to detect changes
  let previousCartItems = [];
  
  // Helper function for logging
  function log(message) {
    if (DEBUG) {
      console.log(`[Trapo Auto-Boot]: ${message}`);
    }
  }

  // Helper function to check if an item has Front+Rear package
  function hasFrontRearPackage(item) {
    // Check variant title
    if (item.variant_title && item.variant_title.includes('Front + Rear')) {
      return true;
    }
    
    // Check options with values
    if (item.options_with_values) {
      const packageOption = item.options_with_values.find(option => 
        option.name === 'Packages' || option.name.toLowerCase().includes('package')
      );
      
      if (packageOption && packageOption.value === 'Front + Rear') {
        return true;
      }
    }
    
    return false;
  }

  // Helper function to check if an item is a Boot variant
  function isBootVariant(item) {
    // Check variant title
    if (item.variant_title && item.variant_title.toLowerCase().includes('boot')) {
      return true;
    }
    
    // Check options with values
    if (item.options_with_values) {
      const packageOption = item.options_with_values.find(option => 
        option.name === 'Packages' || option.name.toLowerCase().includes('package')
      );
      
      if (packageOption && packageOption.value.toLowerCase().includes('boot')) {
        return true;
      }
    }
    
    return false;
  }

  // Helper function to check if Boot variant is already in cart
  function hasBootVariantInCart(cartItems, productId) {
    return cartItems.some(item => {
      // Check if item is from the same product
      if (item.product_id !== productId) {
        return false;
      }
      
      return isBootVariant(item);
    });
  }

  // Helper function to check if an item is a Scented Stone Starter Kit
  function isScentedStoneStarterKit(item) {
    return item.product_id === SCENTED_STONE_STARTER_KIT_ID;
  }

  // Helper function to check if an item is a Scented Stone Refill
  function isScentedStoneRefill(item) {
    return item.product_id === SCENTED_STONE_REFILL_ID;
  }

  // Helper function to get scent type from item
  function getScentType(item) {
    console.log('=== [Trapo Auto-Boot] GET SCENT TYPE DEBUG ===');
    console.log('[Trapo Auto-Boot] Item for scent extraction:', item);
    console.log('[Trapo Auto-Boot] Item variant_title:', item.variant_title);
    console.log('[Trapo Auto-Boot] Item options_with_values:', item.options_with_values);
    
    // Check variant title first
    if (item.variant_title) {
      console.log(`[Trapo Auto-Boot] ✅ Found scent type from variant_title: "${item.variant_title}"`);
      return item.variant_title;
    }
    
    // Check options_with_values for Type option
    if (item.options_with_values) {
      const typeOption = item.options_with_values.find(option => 
        option.name === 'Type' || option.name.toLowerCase().includes('type')
      );
      
      console.log('[Trapo Auto-Boot] Type option found:', typeOption);
      
      if (typeOption && typeOption.value) {
        console.log(`[Trapo Auto-Boot] ✅ Found scent type from options: "${typeOption.value}"`);
        return typeOption.value;
      }
    }
    
    console.log('[Trapo Auto-Boot] ❌ Could not extract scent type from item');
    return null;
  }

  // Helper function to check if Scented Stone Refill is already in cart
  function hasScentedStoneRefillInCart(cartItems, scentType) {
    return cartItems.some(item => {
      if (!isScentedStoneRefill(item)) {
        return false;
      }
      
      const itemScentType = getScentType(item);
      return itemScentType === scentType;
    });
  }

  // Helper function to check if cart has any Trapo products we should process
  function hasAnyTrapoProducts(cartObject) {
    if (!cartObject || !cartObject.items || !Array.isArray(cartObject.items)) {
      return false;
    }
    
    return cartObject.items.some(item => {
      // Check for Front+Rear items (car mats)
      if (hasFrontRearPackage(item)) {
        return true;
      }
      
      // Check for Scented Stone Starter Kit items
      if (isScentedStoneStarterKit(item)) {
        return true;
      }
      
      return false;
    });
  }

  // Function to fetch product data
  function fetchProductData(handle) {
    return new Promise((resolve, reject) => {
      jQuery.getJSON(`/products/${handle}.js`, data => {
        resolve(data);
      }).fail(error => {
        reject(error);
      });
    });
  }

  // Function to find Boot variant from product data
  function findBootVariant(productData) {
    if (!productData || !productData.variants || !Array.isArray(productData.variants)) {
      log('Invalid product data structure');
      return null;
    }
    
    // Look for Boot variant
    return productData.variants.find(variant => {
      // Check variant title
      if (variant.title && variant.title.toLowerCase().includes('boot')) {
        return true;
      }
      
      // Check option values if available
      if (variant.options && Array.isArray(variant.options)) {
        return variant.options.some(option => 
          typeof option === 'string' && option.toLowerCase().includes('boot')
        );
      }
      
      return false;
    });
  }

  // Function to find matching Scented Stone Refill variant
  function findScentedStoneRefillVariant(productData, scentType) {
    console.log('=== [Trapo Auto-Boot] FIND REFILL VARIANT DEBUG ===');
    console.log('[Trapo Auto-Boot] Product data:', productData);
    console.log('[Trapo Auto-Boot] Looking for scent type:', scentType);
    
    if (!productData || !productData.variants || !Array.isArray(productData.variants)) {
      console.log('❌ [Trapo Auto-Boot] Invalid refill product data structure');
      log('Invalid refill product data structure');
      return null;
    }
    
    console.log(`[Trapo Auto-Boot] Available refill variants (${productData.variants.length}):`);
    productData.variants.forEach((variant, index) => {
      console.log(`[Trapo Auto-Boot] Refill Variant ${index + 1}:`, {
        id: variant.id,
        title: variant.title,
        option1: variant.option1,
        option2: variant.option2,
        option3: variant.option3
      });
    });
    
    log(`Looking for refill variant with scent type: ${scentType}`);
    
    // Find variant that matches the scent type
    const matchingVariant = productData.variants.find(variant => {
      console.log(`[Trapo Auto-Boot] 🔍 Checking refill variant ${variant.id}:`);
      console.log(`[Trapo Auto-Boot] - Variant title: "${variant.title}"`);
      console.log(`[Trapo Auto-Boot] - Variant option1: "${variant.option1}"`);
      
      // Check variant title
      const titleMatch = variant.title === scentType;
      console.log(`[Trapo Auto-Boot] - Title match (${variant.title} === ${scentType}): ${titleMatch}`);
      
      if (titleMatch) {
        return true;
      }
      
      // Check option1 (Type option)
      const option1Match = variant.option1 === scentType;
      console.log(`[Trapo Auto-Boot] - Option1 match (${variant.option1} === ${scentType}): ${option1Match}`);
      
      if (option1Match) {
        return true;
      }
      
      console.log(`[Trapo Auto-Boot] - No match for this variant`);
      return false;
    });
    
    if (matchingVariant) {
      console.log(`🎉 [Trapo Auto-Boot] Found matching refill variant: ${matchingVariant.id} - ${matchingVariant.title}`);
      log(`Found matching refill variant: ${matchingVariant.id} - ${matchingVariant.title}`);
      return matchingVariant;
    }
    
    console.log(`❌ [Trapo Auto-Boot] No matching refill variant found for scent type: ${scentType}`);
    log(`No matching refill variant found for scent type: ${scentType}`);
    return null;
  }

  // Function to add Scented Stone Refill to cart
  function addScentedStoneRefillToCart(variantId, scentType) {
    return new Promise((resolve, reject) => {
      jQuery.ajax({
        type: 'POST',
        url: '/cart/add.js',
        data: {
          items: [{
            id: variantId,
            quantity: 1
          }]
        },
        dataType: 'json',
        success: function(data) {
          log(`Successfully added Scented Stone Refill variant ${variantId} to cart`);
          resolve(data);
        },
        error: function(xhr, status, error) {
          log(`Failed to add Scented Stone Refill variant ${variantId} to cart: ${error}`);
          reject(new Error(error));
        }
      });
    });
  }

  // Function to find Boot variant with color matching
  function findBootVariantWithColorMatch(productData, frontRearItem) {
    if (!productData || !productData.variants || !Array.isArray(productData.variants)) {
      log('Invalid product data structure');
      return null;
    }
    
    // First, get all Boot variants
    const bootVariants = productData.variants.filter(variant => {
      // Check variant title
      if (variant.title && variant.title.toLowerCase().includes('boot')) {
        return true;
      }
      
      // Check option values if available
      if (variant.options && Array.isArray(variant.options)) {
        return variant.options.some(option => 
          typeof option === 'string' && option.toLowerCase().includes('boot')
        );
      }
      
      return false;
    });
    
    if (bootVariants.length === 0) {
      log('No Boot variants found');
      return null;
    }
    
    console.log('=== [Trapo Auto-Boot] BOOT VARIANT MATCHING DEBUG ===');
    console.log('[Trapo Auto-Boot] Found Boot variants:', bootVariants.length);
    bootVariants.forEach((variant, index) => {
      console.log(`[Trapo Auto-Boot] Boot Variant ${index + 1}:`, {
        id: variant.id,
        title: variant.title,
        option1: variant.option1,
        option2: variant.option2,
        option3: variant.option3
      });
    });
    
    // Extract colors from Front+Rear item (option1 and option2)
    let frontRearOption1 = null;
    let frontRearOption2 = null;
    
    // Check options_with_values for the first two options (colors)
    if (frontRearItem.options_with_values && frontRearItem.options_with_values.length >= 2) {
      frontRearOption1 = frontRearItem.options_with_values[0]?.value;
      frontRearOption2 = frontRearItem.options_with_values[1]?.value;
    }
    
    console.log('=== [Trapo Auto-Boot] FRONT+REAR ITEM ANALYSIS ===');
    console.log('[Trapo Auto-Boot] Front+Rear item full details:', frontRearItem);
    console.log('[Trapo Auto-Boot] Front+Rear options_with_values:', frontRearItem.options_with_values);
    console.log('[Trapo Auto-Boot] Front+Rear option1 (first color):', frontRearOption1);
    console.log('[Trapo Auto-Boot] Front+Rear option2 (second color):', frontRearOption2);
    
    // If no colors found, return first Boot variant
    if (!frontRearOption1 && !frontRearOption2) {
      log('No colors found in Front+Rear item, returning first Boot variant');
      return bootVariants[0];
    }
    
    console.log('=== [Trapo Auto-Boot] MATCHING PROCESS ===');
    // Try to find matching Boot variant by exact color combination
    const matchingBootVariant = bootVariants.find(variant => {
      console.log(`[Trapo Auto-Boot] 🔍 Checking Boot variant ${variant.id}:`);
      console.log(`[Trapo Auto-Boot] - Variant Title: "${variant.title}"`);
      console.log(`[Trapo Auto-Boot] - Variant Option1: "${variant.option1}"`);
      console.log(`[Trapo Auto-Boot] - Variant Option2: "${variant.option2}"`);
      console.log(`[Trapo Auto-Boot] - Variant Option3: "${variant.option3}"`);
      
      // Match option1 and option2 exactly
      const option1Match = variant.option1 === frontRearOption1;
      const option2Match = variant.option2 === frontRearOption2;
      const isBootVariant = variant.option3 === 'Boot';
      
      console.log(`[Trapo Auto-Boot] 🎯 Match Results:`);
      console.log(`[Trapo Auto-Boot] - Option1 Match (${variant.option1} === ${frontRearOption1}): ${option1Match}`);
      console.log(`[Trapo Auto-Boot] - Option2 Match (${variant.option2} === ${frontRearOption2}): ${option2Match}`);
      console.log(`[Trapo Auto-Boot] - Is Boot Variant (${variant.option3} === 'Boot'): ${isBootVariant}`);
      console.log(`[Trapo Auto-Boot] - Overall Match: ${option1Match && option2Match && isBootVariant}`);
      console.log('---');
      
      return option1Match && option2Match && isBootVariant;
    });
    
    if (matchingBootVariant) {
      console.log('🎉 [Trapo Auto-Boot] SUCCESS! Found matching color Boot variant:');
      console.log('[Trapo Auto-Boot] Selected Boot Variant:', {
        id: matchingBootVariant.id,
        title: matchingBootVariant.title,
        option1: matchingBootVariant.option1,
        option2: matchingBootVariant.option2,
        option3: matchingBootVariant.option3
      });
      return matchingBootVariant;
    }
    
    // If no exact match, return first Boot variant as fallback
    log('No exact color match found, returning first Boot variant as fallback');
    return bootVariants[0];
  }

  // Function to add Boot variant to cart
  function addBootVariantToCart(variantId, productHandle) {
    return new Promise((resolve, reject) => {
      jQuery.ajax({
        type: 'POST',
        url: '/cart/add.js',
        data: {
          items: [{
            id: variantId,
            quantity: 1,
            properties: {
              'Free_Item': 'Yes'
            }
          }]
        },
        dataType: 'json',
        success: function(data) {
          log(`Successfully added Boot variant (${variantId}) to cart`);
          resolve(data);
        },
        error: function(error) {
          log(`Failed to add Boot variant: ${JSON.stringify(error)}`);
          reject(error);
        }
      });
    });
  }

  // Function to remove Boot variant from cart
  function removeBootVariantFromCart(bootItem) {
    return new Promise((resolve, reject) => {
      jQuery.ajax({
        type: 'POST',
        url: '/cart/change.js',
        data: {
          id: bootItem.key,
          quantity: 0
        },
        dataType: 'json',
        success: function(data) {
          log(`Successfully removed Boot variant (${bootItem.variant_id}) from cart`);
          resolve(data);
        },
        error: function(error) {
          log(`Failed to remove Boot variant: ${JSON.stringify(error)}`);
          reject(error);
        }
      });
    });
  }

  // Function to find related Boot variants for a product
  function findRelatedBootVariants(cartItems, productId) {
    return cartItems.filter(item => {
      return item.product_id === productId && isBootVariant(item);
    });
  }

  // Function to find related Scented Stone Refills for a scent type
  function findRelatedScentedStoneRefills(cartItems, scentType) {
    return cartItems.filter(item => {
      if (!isScentedStoneRefill(item)) {
        return false;
      }
      
      const itemScentType = getScentType(item);
      return itemScentType === scentType;
    });
  }

  // Function to detect removed Scented Stone Starter Kit items
  function detectRemovedScentedStoneStarterKits(currentItems, previousItems) {
    const currentStarterKits = currentItems.filter(isScentedStoneStarterKit);
    const previousStarterKits = previousItems.filter(isScentedStoneStarterKit);
    
    return previousStarterKits.filter(prevItem => {
      return !currentStarterKits.some(currentItem => 
        currentItem.variant_id === prevItem.variant_id && 
        currentItem.key === prevItem.key
      );
    });
  }

  // Function to detect removed Front+Rear items
  function detectRemovedFrontRearItems(currentItems, previousItems) {
    const removedItems = [];
    
    // Find Front+Rear items that were in previous cart but not in current cart
    const previousFrontRearItems = previousItems.filter(hasFrontRearPackage);
    const currentFrontRearItems = currentItems.filter(hasFrontRearPackage);
    
    for (const prevItem of previousFrontRearItems) {
      const stillInCart = currentFrontRearItems.some(currentItem => 
        currentItem.variant_id === prevItem.variant_id && 
        currentItem.key === prevItem.key
      );
      
      if (!stillInCart) {
        removedItems.push(prevItem);
      }
    }
    
    return removedItems;
  }

  // Function to process Scented Stone Starter Kit items
  async function processScentedStoneStarterKits(currentItems) {
    try {
      const starterKitItems = currentItems.filter(isScentedStoneStarterKit);
      
      console.log('[Trapo Auto-Boot] Filtered Starter Kit items:', starterKitItems.length);
      
      if (starterKitItems.length === 0) {
        console.log('❌ [Trapo Auto-Boot] No Scented Stone Starter Kit items found in cart');
        log('No Scented Stone Starter Kit items found in cart');
        return;
      }
      
      console.log(`✅ [Trapo Auto-Boot] Found ${starterKitItems.length} Scented Stone Starter Kit items`);
      log(`Found ${starterKitItems.length} Scented Stone Starter Kit items`);
      
      // Process each Starter Kit item
      for (const starterKitItem of starterKitItems) {
        console.log('=== [Trapo Auto-Boot] PROCESSING STARTER KIT ITEM ===');
        console.log('[Trapo Auto-Boot] Starter Kit item details:', starterKitItem);
        
        const scentType = getScentType(starterKitItem);
        console.log('[Trapo Auto-Boot] Extracted scent type:', scentType);
        
        if (!scentType) {
          console.log('❌ [Trapo Auto-Boot] Could not determine scent type for Starter Kit item');
          log('Could not determine scent type for Starter Kit item');
          continue;
        }
        
        // Skip if matching Refill is already in cart
        const hasRefillAlready = hasScentedStoneRefillInCart(currentItems, scentType);
        console.log('[Trapo Auto-Boot] Checking if refill already in cart:', hasRefillAlready);
        
        if (hasRefillAlready) {
          console.log(`⚠️ [Trapo Auto-Boot] Scented Stone Refill already in cart for scent type: ${scentType}`);
          log(`Scented Stone Refill already in cart for scent type: ${scentType}`);
          continue;
        }
        
        console.log(`🔄 [Trapo Auto-Boot] Processing Scented Stone Starter Kit with scent: ${scentType}`);
        log(`Processing Scented Stone Starter Kit with scent: ${scentType}`);
        
        console.log(`[Trapo Auto-Boot] Fetching refill product data for handle: ${SCENTED_STONE_REFILL_HANDLE}`);
        
        // Fetch refill product data
        const refillProductData = await fetchProductData(SCENTED_STONE_REFILL_HANDLE);
        
        console.log('[Trapo Auto-Boot] Refill product data received:', refillProductData);
        console.log('[Trapo Auto-Boot] Refill variants:', refillProductData?.variants);
        
        // Find matching refill variant
        const refillVariant = findScentedStoneRefillVariant(refillProductData, scentType);
        
        console.log('[Trapo Auto-Boot] Found refill variant:', refillVariant);
        
        if (!refillVariant) {
          console.log(`❌ [Trapo Auto-Boot] No matching refill variant found for scent type: ${scentType}`);
          log(`No matching refill variant found for scent type: ${scentType}`);
          continue;
        }
        
        console.log(`✅ [Trapo Auto-Boot] Found matching refill variant: ${refillVariant.id} - ${refillVariant.title}`);
        log(`Found matching refill variant: ${refillVariant.id} - ${refillVariant.title}`);
        
        console.log(`[Trapo Auto-Boot] Adding refill variant ${refillVariant.id} to cart...`);
        
        // Add refill variant to cart
        await addScentedStoneRefillToCart(refillVariant.id, scentType);
        
        console.log(`🎉 [Trapo Auto-Boot] Successfully processed Scented Stone Starter Kit!`);
      }
    } catch (error) {
      console.log(`❌ [Trapo Auto-Boot] Error processing Scented Stone Starter Kits: ${error.message}`);
      log(`Error processing Scented Stone Starter Kits: ${error.message}`);
    }
  }

  // Main function to process cart and add Boot variant if needed
  async function processCart(cartObject, shouldProcessBootVariants = true) {
    try {
      if (!cartObject || !cartObject.items || !Array.isArray(cartObject.items)) {
        log('Invalid cart structure');
        return;
      }
      
      const currentItems = cartObject.items;
      log(`Processing cart with ${currentItems.length} items`);
      
      // Check for removed Front+Rear items (only if processing boot variants)
      if (shouldProcessBootVariants) {
        const removedFrontRearItems = detectRemovedFrontRearItems(currentItems, previousCartItems);
        
        // Handle removed Front+Rear items first
        for (const removedItem of removedFrontRearItems) {
          log(`Front+Rear item removed: ${removedItem.product_id}`);
          
          // Find related Boot variants
          const relatedBootVariants = findRelatedBootVariants(currentItems, removedItem.product_id);
          
          // Remove related Boot variants
          for (const bootItem of relatedBootVariants) {
            if (bootItem.properties && bootItem.properties.Free_Item === 'Yes') {
              log(`Removing related Boot variant: ${bootItem.variant_id}`);
              await removeBootVariantFromCart(bootItem);
            }
          }
        }
      }

      // Check for removed Scented Stone Starter Kit items
      const removedStarterKits = detectRemovedScentedStoneStarterKits(currentItems, previousCartItems);
      
      // Handle removed Starter Kit items
      for (const removedStarterKit of removedStarterKits) {
        const scentType = getScentType(removedStarterKit);
        log(`Scented Stone Starter Kit removed: ${scentType}`);
        
        // Find related Refill items
        const relatedRefills = findRelatedScentedStoneRefills(currentItems, scentType);
        
        // Remove related Refill items that were auto-added
        for (const refillItem of relatedRefills) {
          if (refillItem.properties && refillItem.properties.Auto_Added_Refill === 'Yes') {
            log(`Removing related Scented Stone Refill: ${refillItem.variant_id}`);
            await removeBootVariantFromCart(refillItem); // Reuse the same removal function
          }
        }
      }
      
      // Process Front+Rear items for boot variants (only if processing boot variants)
      if (shouldProcessBootVariants) {
        // Find items with Front+Rear package
        const frontRearItems = currentItems.filter(hasFrontRearPackage);
        
        if (frontRearItems.length === 0) {
          log('No Front+Rear items found in cart');
        } else {
          log(`Found ${frontRearItems.length} Front+Rear items`);
          
          // Process each Front+Rear item
          for (const item of frontRearItems) {
            const productId = item.product_id;
            const productHandle = item.handle;
            
            // Skip if Boot variant is already in cart for this product
            if (hasBootVariantInCart(currentItems, productId)) {
              log(`Boot variant already in cart for product ${productId}`);
              continue;
            }
            
            // Console log current Front+Rear item
            console.log('[Trapo Auto-Boot] Current Front+Rear Item:', item);
            console.log('[Trapo Auto-Boot] Item options_with_values:', item.options_with_values);
            console.log('[Trapo Auto-Boot] Item variant_title:', item.variant_title);
            
            log(`Fetching product data for ${productHandle}`);
            
            // Fetch product data
            const productData = await fetchProductData(productHandle);
            
            // Console log product data for debugging
            console.log('[Trapo Auto-Boot] Product Data:', productData);
            console.log('[Trapo Auto-Boot] Product Options:', productData.options);
            console.log('[Trapo Auto-Boot] Product Variants:', productData.variants);
            
            // Log each variant details
            if (productData.variants && Array.isArray(productData.variants)) {
              productData.variants.forEach((variant, index) => {
                console.log(`[Trapo Auto-Boot] Variant ${index + 1}:`, {
                  id: variant.id,
                  title: variant.title,
                  option1: variant.option1,
                  option2: variant.option2,
                  option3: variant.option3,
                  available: variant.available,
                  price: variant.price
                });
              });
            }
            
            // Find Boot variant with color matching
            const bootVariant = findBootVariantWithColorMatch(productData, item);
            
            if (!bootVariant) {
              log(`No Boot variant found for product ${productId}`);
              continue;
            }
            
            log(`Found Boot variant: ${bootVariant.id}`);
            
            // Add Boot variant to cart
            await addBootVariantToCart(bootVariant.id, productHandle);
          }
        }
      }

      console.log('=== [Trapo Auto-Boot] SCENTED STONE PROCESSING DEBUG ===');
      console.log('[Trapo Auto-Boot] All current cart items:', currentItems);
      console.log('[Trapo Auto-Boot] Checking for Scented Stone Starter Kit ID:', SCENTED_STONE_STARTER_KIT_ID);
      
      // Debug each item to see if it matches
      currentItems.forEach((item, index) => {
        console.log(`[Trapo Auto-Boot] Item ${index + 1} FULL OBJECT:`, item);
        console.log(`[Trapo Auto-Boot] Item ${index + 1} SUMMARY:`, {
          product_id: item.product_id,
          title: item.title || item.product_title,
          variant_title: item.variant_title,
          variant_id: item.variant_id,
          options_with_values: item.options_with_values,
          isStarterKit: item.product_id === SCENTED_STONE_STARTER_KIT_ID,
          expectedStarterKitId: SCENTED_STONE_STARTER_KIT_ID
        });
      });
      
      // Process Scented Stone Starter Kit items
      await processScentedStoneStarterKits(currentItems);
      
      // Update previous cart items for next comparison
      previousCartItems = JSON.parse(JSON.stringify(currentItems));
      
    } catch (error) {
      log(`Error processing cart: ${error.message}`);
    }
  }

  // Listen for CART_UPDATED event
  document.addEventListener('CART_UPDATED', function(event) {
    const cartObject = event.detail || {};
/*
    // Check if we should process boot variants (only for non-mpv-product)
    const shouldProcessBootVariants = $('.product_form').hasClass('non-mpv-product');
    
    // Check if we should process scented stone products (always check)
    const hasScentedStoneProducts = cartObject.items && cartObject.items.some(item => 
      isScentedStoneStarterKit(item) || isScentedStoneRefill(item)
    );
    
    if (shouldProcessBootVariants || hasScentedStoneProducts) {
      console.log('[Trapo Auto-Boot] CART_UPDATED event triggered, processing cart...');
      processCart(cartObject, shouldProcessBootVariants);
    } else {
      console.log('[Trapo Auto-Boot] CART_UPDATED event triggered, but no relevant products found');
    }*/

    if(document.querySelector('.pickup-in-store-1')){
        if (!$('.pickup-in-store-1').hasClass("addedNote")) {
        $(".pickup-in-store-1 .wow-cart-product-price-block").append("<p class='pickup-note'>Note : Our staff will contact you once your item is available to pick up</p>");
      }
       $('.pickup-in-store-1').addClass('addedNote');
    }

    //clear cart if cart only has free products
    
    if(cartObject.item_count >0 && cartObject.items_subtotal_price === 0){
      let addonProducts = ((wowcart.cartItems || {}).items || []).filter(item=>item.product_type == 'Add-On' || item.product_type == 'Promotional' || item.product_type == 'Reward')
     if((addonProducts||{}).length == (wowcart.cartItems || {}).item_count){
          (window.wowcart || {}).clearCart && (window.wowcart || {}).clearCart();
        }  
    }
    removeQuantitySelector();
    initOrGetLocsStorePickup();
  });
  /*
  // Initial check when script loads (if cart data is available)
  if (window.cartObject) {
    processCart(window.cartObject);
  }*/
  
  log('Initialized');
})();
</script>
