<style>
    /*   hide quantity seelctor of promotional and addon type products */
      #wow-cart-drawer-app .wow-cart-product-item[data-product_type="Add-On"] .wow-cart-quantity-box,
    #wow-cart-drawer-app .wow-cart-product-item[data-product_type="Promotional"] .wow-cart-quantity-box {
      display: none;
    }
      form#wowcart-cart-form{
        margin-bottom:0
      }
    #wow-cart-drawer-app .wow-cart-box-wrapper {
          height: 100% !important;
    }

    #wow-cart-drawer-app .wowcart_custom-placeholder {

      padding-left: 8px !important;
      padding-right: 8px !important;
  }

     .wow-cart-quantity__value {
    margin: unset !important;
  }

  .wow-cart-fixed-form {
  margin-bottom: unset !important;
  }

  .wow-cart-hide-item + .wowcart_custom-placeholder {
    display: none !important;
  }

     #wow-cart-drawer-app .wowcart-product-item__footer-content {

      max-width: fit-content !important;
      flex-wrap: wrap !important;
  }
     /* .wowcart-product-item__footer{
       display:none !important;
     } */
     /* .wow-cart-product-item{
       margin-bottom:10px !important;
     } */
</style>

<script
  id="wowcart-custom-script"
>

 function removeQuantitySelector(){
      const product_types =['Add-On','Promotional'];
      
          (product_types || []).forEach(type => {
          Array.from(document.querySelectorAll(`#wow-cart-drawer-app .wow-cart-product-item[data-product_type="${type}"] .wow-cart-quantity-box`) || []).forEach(ele => {
            ele.remove();
          });
        });
  }
  function removeUfeWidgetsAndRefresh() {
  // 1. Select all elements with the class 'ufe-widget'
  const ufeWidgets = document.querySelectorAll('.ufe-widget:not(.ufe-popup .ufe-widget)');

  // 2. Remove each widget from the DOM
  ufeWidgets.forEach(widget => {
    widget.remove(); 
  });

  // 3. Call the refresh function 
  if (typeof window.ufe !== 'undefined' && typeof window.ufe.refreshUpsell() === 'function') {
    window.ufe.refreshUpsell();
  } else {
    console.warn('ufe is not defined');
  }
}

  // Initialize store pickup div if not present
  function initStorePickupDiv() {
    const holder = document.querySelector('#genie-store-pickup-front-holder-drawer');
    if (!holder) {
      const div = document.createElement('div');
      div.id = 'genie-store-pickup-front-holder-drawer';
      div.dataset.storeDomain = "{{ shop.permanent_domain }}";
      console.log("div : ", div)
      const targetElement = document.querySelector('.wowcart_custom-placeholder');
      if (targetElement) {
        targetElement.appendChild(div);
        setTimeout(loadStorePickup, 0); // Assuming loadStorePickup is defined elsewhere
        console.log("initStorePickupDiv created for calling : ", targetElement)
      }
    }
  }

  // Initialize store pickup div if not present
  function initOrGetLocsStorePickup() {
    // Reinitialize the store pickup div
    if (typeof initStorePickupDiv === 'function') {
        console.log('Reinitializing Store Pickup Div');
         // var getclasscheckoutMethodName= document.getElementsByClassName("checkoutMethodName")
    // if (!getclasscheckoutMethodName || getclasscheckoutMethodName.length == 0) { 
        if ($('.genie-app .checkoutMethodName').length == 0) {
          console.log("in init genie");
          initStorePickupDiv();  
        } else if ($('.genie-app .checkoutMethodName').length > 0 && $('.genie-app .checkoutMethod.active').text() == 'Store Pickup') {
          console.log("in get loc genie");
          getGenieLocations();
        }
    } else {
        console.warn('initStorePickupDiv is not defined');
    }
  }

  //Cart Loaded event
   document.addEventListener('WOWCART_LOADED', () => {
     console.log("This is inside THE WOW CART OPEN ------------>")

     var imgUrl = "https://cdn.shopify.com/s/files/1/0234/7089/9277/files/Store-Pickup-Banner.png";
var $container = $('.wowcart_custom-placeholder');

// Check if the image is already present
if ($container.find('img[src="' + imgUrl + '"]').length === 0) {
  $container.prepend('<img src="' + imgUrl + '" style="width: 100%;padding-top: 10px;">');
}
     setTimeout(function () {
                if ($(".dashcam-note").length == 0) {
              $('[data-product_type="TRAPO DASHCAM"] .wow-cart-product-price-block').append('<p class="dashcam-note" style="color: red;font-size: 11px;font-weight: 700;letter-spacing: 0.4px;padding-top: 2px;">NOTE : Choose Store Pickup for free installation</p>');
                }
                }, 550);
        console.log('WOW cart loaded')
     removeUfeWidgetsAndRefresh();
        removeQuantitySelector();
        initStorePickupDiv();
      {% if customer %}
      // if(!document.querySelector('#loyalty-point')){
      //   // header
      //   const div_top = document.createElement('div');
      //     // Set Attributes on Element
      //     div_top.setAttribute('id', 'loyalty-point-top');
      //     const SELECTOR_TOP = '.slider-cart-top-bar.sider-cart-header';
      //     const element_top = document.querySelector(SELECTOR_TOP);
      //     element_top.after(div_top);
      //     const loyaltyPointElement_top = document.querySelector('#loyalty-point-top');
      //     loyaltyPointElement_top.innerHTML = `<span class="points-on-cart">You have <span data-lion-points="approved"></span> points</span><span class="plus-points-cart">(Plus, earn
      //     <span data-lion-points="cart"></span> points with this order.)`;

       
      //  // footer
          // const div = document.createElement('div');
          // // Set Attributes on Element
          // div.setAttribute('id', 'loyalty-point');
          // const SELECTOR = '.slider-cart-footer-note';
          // const element = document.querySelector(SELECTOR);
          // element.before(div);
          // const loyaltyPointElement = document.querySelector('#loyalty-point');
          // loyaltyPointElement.innerHTML = `<span class="points-on-cart">You have <span data-lion-points="approved"></span> points</span><span class="plus-points-cart">(Plus, earn
          // <span data-lion-points="cart"></span> points with this order.)`;       
        //}
        {% endif %}     
  });

  
document.addEventListener('WOWCART_PRODUCT_DELETED', function(items) { 
const cartObject = items.detail || {};
  console.log('Hii',cartObject);
   if(cartObject.item_count > 0){
      let addonProducts = ((wowcart.cartItems || {}).items || []).filter(item=>item.product_type == 'Add-On' || item.product_type == 'Promotional' || item.product_type == 'Reward')
        if((addonProducts||{}).length == (wowcart.cartItems || {}).item_count){
          (window.wowcart || {}).clearCart && (window.wowcart || {}).clearCart();
        }  
    }
  initOrGetLocsStorePickup();
});


  /**
 * Trapo Auto-Add Boot Variant
 * 
 * This script automatically adds a free Boot variant to the cart when a Front+Rear variant is added.
 * It also removes the Boot variant when the related Front+Rear variant is removed.
 * It listens for the CART_UPDATED event and processes the cart items accordingly.
 */

(function() {
  // Configuration
  const DEBUG = true;
  
  // Store previous cart state to detect changes
  let previousCartItems = [];
  
  // Helper function for logging
  function log(message) {
    if (DEBUG) {
      console.log(`[Trapo Auto-Boot]: ${message}`);
    }
  }

  // Helper function to check if an item has Front+Rear package
  function hasFrontRearPackage(item) {
    // Check variant title
    if (item.variant_title && item.variant_title.includes('Front + Rear')) {
      return true;
    }
    
    // Check options with values
    if (item.options_with_values) {
      const packageOption = item.options_with_values.find(option => 
        option.name === 'Packages' || option.name.toLowerCase().includes('package')
      );
      
      if (packageOption && packageOption.value === 'Front + Rear') {
        return true;
      }
    }
    
    return false;
  }

  // Helper function to check if an item is a Boot variant
  function isBootVariant(item) {
    // Check variant title
    if (item.variant_title && item.variant_title.toLowerCase().includes('boot')) {
      return true;
    }
    
    // Check options with values
    if (item.options_with_values) {
      const packageOption = item.options_with_values.find(option => 
        option.name === 'Packages' || option.name.toLowerCase().includes('package')
      );
      
      if (packageOption && packageOption.value.toLowerCase().includes('boot')) {
        return true;
      }
    }
    
    return false;
  }

  // Helper function to check if Boot variant is already in cart
  function hasBootVariantInCart(cartItems, productId) {
    return cartItems.some(item => {
      // Check if item is from the same product
      if (item.product_id !== productId) {
        return false;
      }
      
      return isBootVariant(item);
    });
  }

  // Function to fetch product data
  function fetchProductData(handle) {
    return new Promise((resolve, reject) => {
      jQuery.getJSON(`/products/${handle}.js`, data => {
        resolve(data);
      }).fail(error => {
        reject(error);
      });
    });
  }

  // Function to find Boot variant from product data
  function findBootVariant(productData) {
    if (!productData || !productData.variants || !Array.isArray(productData.variants)) {
      log('Invalid product data structure');
      return null;
    }
    
    // Look for Boot variant
    return productData.variants.find(variant => {
      // Check variant title
      if (variant.title && variant.title.toLowerCase().includes('boot')) {
        return true;
      }
      
      // Check option values if available
      if (variant.options && Array.isArray(variant.options)) {
        return variant.options.some(option => 
          typeof option === 'string' && option.toLowerCase().includes('boot')
        );
      }
      
      return false;
    });
  }

  // Function to add Boot variant to cart
  function addBootVariantToCart(variantId, productHandle) {
    return new Promise((resolve, reject) => {
      jQuery.ajax({
        type: 'POST',
        url: '/cart/add.js',
        data: {
          items: [{
            id: variantId,
            quantity: 1,
            properties: {
              'Free_Item': 'Yes'
            }
          }]
        },
        dataType: 'json',
        success: function(data) {
          log(`Successfully added Boot variant (${variantId}) to cart`);
          resolve(data);
        },
        error: function(error) {
          log(`Failed to add Boot variant: ${JSON.stringify(error)}`);
          reject(error);
        }
      });
    });
  }

  // Function to remove Boot variant from cart
  function removeBootVariantFromCart(bootItem) {
    return new Promise((resolve, reject) => {
      jQuery.ajax({
        type: 'POST',
        url: '/cart/change.js',
        data: {
          id: bootItem.key,
          quantity: 0
        },
        dataType: 'json',
        success: function(data) {
          log(`Successfully removed Boot variant (${bootItem.variant_id}) from cart`);
          resolve(data);
        },
        error: function(error) {
          log(`Failed to remove Boot variant: ${JSON.stringify(error)}`);
          reject(error);
        }
      });
    });
  }

  // Function to find related Boot variants for a product
  function findRelatedBootVariants(cartItems, productId) {
    return cartItems.filter(item => {
      return item.product_id === productId && isBootVariant(item);
    });
  }

  // Function to detect removed Front+Rear items
  function detectRemovedFrontRearItems(currentItems, previousItems) {
    const removedItems = [];
    
    // Check each previous item to see if it's no longer in the current items
    previousItems.forEach(prevItem => {
      if (hasFrontRearPackage(prevItem)) {
        // Check if this Front+Rear item still exists in current cart
        const stillExists = currentItems.some(currItem => 
          currItem.variant_id === prevItem.variant_id && 
          currItem.product_id === prevItem.product_id
        );
        
        if (!stillExists) {
          removedItems.push(prevItem);
        }
      }
    });
    
    return removedItems;
  }

  // Main function to process cart and add Boot variant if needed
  async function processCart(cartObject) {
    try {
      if (!cartObject || !cartObject.items || !Array.isArray(cartObject.items)) {
        log('Invalid cart structure');
        return;
      }
      
      const currentItems = cartObject.items;
      log(`Processing cart with ${currentItems.length} items`);
      
      // Check for removed Front+Rear items
      const removedFrontRearItems = detectRemovedFrontRearItems(currentItems, previousCartItems);
      
      // Handle removed Front+Rear items first
      for (const removedItem of removedFrontRearItems) {
        log(`Front+Rear item removed: ${removedItem.product_id}`);
        
        // Find related Boot variants
        const relatedBootVariants = findRelatedBootVariants(currentItems, removedItem.product_id);
        
        // Remove related Boot variants
        for (const bootItem of relatedBootVariants) {
          if (bootItem.properties && bootItem.properties.Free_Item === 'Yes') {
            log(`Removing related Boot variant: ${bootItem.variant_id}`);
            await removeBootVariantFromCart(bootItem);
          }
        }
      }
      
      // Find items with Front+Rear package
      const frontRearItems = currentItems.filter(hasFrontRearPackage);
      
      if (frontRearItems.length === 0) {
        log('No Front+Rear items found in cart');
      } else {
        log(`Found ${frontRearItems.length} Front+Rear items`);
        
        // Process each Front+Rear item
        for (const item of frontRearItems) {
          const productId = item.product_id;
          const productHandle = item.handle;
          
          // Skip if Boot variant is already in cart for this product
          if (hasBootVariantInCart(currentItems, productId)) {
            log(`Boot variant already in cart for product ${productId}`);
            continue;
          }
          
          log(`Fetching product data for ${productHandle}`);
          
          // Fetch product data
          const productData = await fetchProductData(productHandle);
          
          // Find Boot variant
          const bootVariant = findBootVariant(productData);
          
          if (!bootVariant) {
            log(`No Boot variant found for product ${productId}`);
            continue;
          }
          
          log(`Found Boot variant: ${bootVariant.id}`);
          
          // Add Boot variant to cart
          await addBootVariantToCart(bootVariant.id, productHandle);
        }
      }
      
      // Update previous cart items for next comparison
      previousCartItems = JSON.parse(JSON.stringify(currentItems));
      
    } catch (error) {
      log(`Error processing cart: ${error.message}`);
    }
  }

  // Listen for CART_UPDATED event
  document.addEventListener('CART_UPDATED', function(event) {
    const cartObject = event.detail || {};

    if ($('.product_form').hasClass('non-mpv-product')) {
      processCart(cartObject);
    }

    if(document.querySelector('.pickup-in-store-1')){
        if (!$('.pickup-in-store-1').hasClass("addedNote")) {
        $(".pickup-in-store-1 .wow-cart-product-price-block").append("<p class='pickup-note'>Note : Our staff will contact you once your item is available to pick up</p>");
      }
       $('.pickup-in-store-1').addClass('addedNote');
    }

    //clear cart if cart only has free products
    
    if(cartObject.item_count >0 && cartObject.items_subtotal_price === 0){
      let addonProducts = ((wowcart.cartItems || {}).items || []).filter(item=>item.product_type == 'Add-On' || item.product_type == 'Promotional' || item.product_type == 'Reward')
     if((addonProducts||{}).length == (wowcart.cartItems || {}).item_count){
          (window.wowcart || {}).clearCart && (window.wowcart || {}).clearCart();
        }  
    }
    removeQuantitySelector();
    initOrGetLocsStorePickup();
  });
  
  // Initial check when script loads (if cart data is available)
  if (window.cartObject) {
    processCart(window.cartObject);
  }
  
  log('Initialized');
})();
</script>
