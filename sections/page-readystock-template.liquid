<section class="highlignt_sec">
  <div class="sec_header_2">
    <h4 class="title"> <span>READY STOCK</span></h4>
  </div>
  <div class="container">
    <div class="ready-stock-container" id="ready-stock-container">
            <!-- Stock information will be loaded here -->
        </div>
  </div>
</section>

<script>
    /**
 * Real-Time Ready Stock Display for Shopify
 * Integrates with Google Apps Script API to show location-based stock information
 */

class ReadyStockDisplay {
  constructor(config = {}) {
    this.config = {
      // Google Apps Script Web App URL - Updated to new deployment
      apiUrl: 'https://script.google.com/macros/s/AKfycbwxwb-UhTJRnw_wgXGcqmw5thqGYCLPA8EmypvMdJI8uELM9jyb8N6w0l8zYgr3USJZ/exec', // UPDATED WITH FIXED DEPLOYMENT
      cacheTimeout: config.cacheTimeout || 300000, // 5 minutes
      retryAttempts: config.retryAttempts || 3,
      retryDelay: config.retryDelay || 1000,
      enableCache: config.enableCache !== false,
      enableDebug: config.enableDebug || false,
      containerSelector: config.containerSelector || '.ready-stock-container',
      loadingText: config.loadingText || 'Loading stock information...',
      noStockText: config.noStockText || 'Currently out of stock',
      errorText: config.errorText || 'Unable to load stock information'
    };
    
    this.cache = new Map();
    this.init();
  }

  /**
   * Initialize the stock display system
   */
  init() {
    this.log('Initializing Ready Stock Display');
    
    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.setup());
    } else {
      this.setup();
    }
  }

  /**
   * Setup the stock display
   */
  setup() {
    // Get product SKU from various possible sources
    const sku = this.getProductSKU();
    
    if (!sku) {
      this.log('No SKU found, skipping stock display');
      return;
    }

    this.log(`Found SKU: ${sku}`);
    
    // Find or create container
    const container = this.getOrCreateContainer();
    if (!container) {
      this.log('Could not find or create container');
      return;
    }

    // Load and display stock
    this.loadStockData(sku, container);
  }

  /**
   * Get product SKU from various sources
   */
  getProductSKU() {
    // Try multiple methods to get SKU
    const methods = [
      () => window.ShopifyAnalytics?.meta?.product?.variants?.[0]?.sku,
      () => document.querySelector('[data-product-sku]')?.dataset.productSku,
      () => document.querySelector('.product-sku')?.textContent?.trim(),
      () => document.querySelector('#product-sku')?.textContent?.trim(),
      () => document.querySelector('.variant-sku')?.textContent?.trim(),
      () => this.extractSKUFromJSON(),
      () => this.extractSKUFromURL()
    ];

    for (const method of methods) {
      try {
        const sku = method();
        if (sku && typeof sku === 'string' && sku.trim()) {
          return sku.trim();
        }
      } catch (error) {
        this.log(`SKU extraction method failed: ${error.message}`);
      }
    }

    return null;
  }

  /**
   * Extract SKU from JSON data in the page
   */
  extractSKUFromJSON() {
    const scripts = document.querySelectorAll('script[type="application/json"]');
    for (const script of scripts) {
      try {
        const data = JSON.parse(script.textContent);
        if (data.product?.variants?.[0]?.sku) {
          return data.product.variants[0].sku;
        }
      } catch (error) {
        // Continue to next script
      }
    }
    return null;
  }

  /**
   * Extract SKU from URL parameters
   */
  extractSKUFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('sku') || urlParams.get('variant');
  }

  /**
   * Get or create the stock display container
   */
  getOrCreateContainer() {
    let container = document.querySelector(this.config.containerSelector);
    
    if (!container) {
      // Try to find a good place to insert the container
      const insertionPoints = [
        '.product-form',
        '.product-info',
        '.product-details',
        '.product-price',
        '.product-description'
      ];

      let insertionPoint = null;
      for (const selector of insertionPoints) {
        insertionPoint = document.querySelector(selector);
        if (insertionPoint) break;
      }

      if (insertionPoint) {
        container = document.createElement('div');
        container.className = 'ready-stock-container';
        insertionPoint.appendChild(container);
      }
    }

    return container;
  }

  /**
   * Load stock data from API
   */
  async loadStockData(sku, container) {
    this.showLoading(container);

    try {
      const stockData = await this.fetchStockData(sku);
      this.displayStockData(stockData, container);
    } catch (error) {
      this.log(`Error loading stock data: ${error.message}`);
      this.showError(container);
    }
  }

  /**
   * Fetch stock data with caching and retry logic
   */
  async fetchStockData(sku) {
    const cacheKey = `stock_${sku}`;
    
    // Check cache first
    if (this.config.enableCache && this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.config.cacheTimeout) {
        this.log('Using cached stock data');
        return cached.data;
      }
    }

    // Fetch from API with retry logic
    let lastError;
    for (let attempt = 1; attempt <= this.config.retryAttempts; attempt++) {
      try {
        this.log(`Fetching stock data (attempt ${attempt})`);
        
        const url = `${this.config.apiUrl}?action=getStock&sku=${encodeURIComponent(sku)}`;
        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
          }
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        if (data.error) {
          throw new Error(data.error);
        }

        // TEMPORARY CLIENT-SIDE FILTERING: Remove "Compile" location
        // This is a workaround until Google Apps Script deployment is updated
        if (data.success && data.data && Array.isArray(data.data)) {
          data.data = data.data.filter(item => {
            const location = item.location ? item.location.toLowerCase() : '';
            return location !== 'compile' && !location.includes('compile');
          });
          
          // Update locations array and total quantity after filtering
          data.locations = data.data.map(item => item.location);
          data.totalQuantity = data.data.reduce((sum, item) => sum + (item.quantity || 0), 0);
          data.found = data.data.length > 0;
          
          this.log(`Client-side filtering applied: ${data.data.length} locations after removing Compile`);
        }

        // Cache the result
        if (this.config.enableCache) {
          this.cache.set(cacheKey, {
            data: data,
            timestamp: Date.now()
          });
        }

        return data;

      } catch (error) {
        lastError = error;
        this.log(`Attempt ${attempt} failed: ${error.message}`);
        
        if (attempt < this.config.retryAttempts) {
          await this.delay(this.config.retryDelay * attempt);
        }
      }
    }

    throw lastError;
  }

  /**
   * Display stock data in the container
   */
  displayStockData(stockData, container) {
    if (!stockData.success) {
      this.showError(container);
      return;
    }

    // Always show locations, even if no stock is found
    const html = this.generateStockHTML(stockData);
    container.innerHTML = html;
    container.classList.add('stock-loaded');
    
    // Trigger custom event
    this.dispatchEvent('stockLoaded', { stockData, container });
  }

  /**
   * Generate HTML for stock display
   */
  generateStockHTML(stockData) {
    // Always show all locations, including out of stock ones
    let html = `
      <div class="ready-stock-display">
        <h3 class="stock-title">üìç Ready Stock Locations</h3>
        <div class="stock-locations">
    `;

    // Get all locations from the API response
    const allLocations = this.getAllLocationsWithStock(stockData);
    
    allLocations.forEach(locationData => {
      html += `
        <div class="stock-location" data-location="${locationData.location}">
          <div class="location-header">
            <span class="location-name">
              ${locationData.location}
              <a href="${this.getWhatsAppURL(locationData.location)}" target="_blank" class="whatsapp-icon">
                <img src="https://cdn.shopify.com/s/files/1/0234/7089/9277/files/whatsapp.png?v=1756654009" alt="WhatsApp" width="20" height="20">
              </a>
            </span>
            <span class="stock-status-badge ${this.getStockStatusClass(locationData.quantity)}">
              ${this.getStockStatusText(locationData.quantity)}
            </span>
          </div>
          <div class="store-hours">Store hours: 10:00 AM - 10:00 PM</div>
        </div>
      `;
    });

    html += `
        </div>
        <div class="stock-summary">
          <div class="total-quantity">Total Available: ${stockData.totalQuantity || 0} units</div>
          <div class="locations-count">Checked ${allLocations.length} location(s)</div>
        </div>
        <div class="stock-updated">
          Last updated: ${new Date(stockData.timestamp).toLocaleString()}
        </div>
      </div>
    `;

    return html;
  }

  /**
   * Get WhatsApp URL for a specific location
   */
  getWhatsAppURL(locationName) {
    // Location-specific WhatsApp mapping
    const whatsappMapping = {
      'BANGSAR': 'https://wa.me/60106694870?text=Welcome%20to%20Trapo%20Bangsar!%0A',
      'BALAKONG': 'https://api.whatsapp.com/send?phone=601136608700',
      '1 UTAMA': 'https://api.whatsapp.com/send/?phone=60167047870&text&type=phone_number&app_absent=0',
      'PENANG': 'https://wa.me/+60146928700?text=Hello,%20I%20need%20help!%0A',
      'KLANG': '#',
      'MELAKA': 'https://wa.me/60102553870?text=Welcome%20to%20Trapo%20Melaka%20Raya!%0A',
      'MVKL': 'https://wa.me/60126388252?text=Welcome%20to%20Trapo%20Mid%20Valley%20Megamall!%0A',
      'CHERAS': 'https://wa.me/60126388295?text=Welcome%20to%20Trapo%20Cheras!%0A',
      'KUCHING': 'https://api.whatsapp.com/send?phone=60167398700',
      'GLENMARIE': 'https://wa.me/60108871870?text=Welcome%20to%20Trapo%20Glenmarie!%0A',
      'KL NORTH': 'tel:+0125854870',
      'TD JB':'https://wa.link/y0c2yw',
      'MV JB':'https://api.whatsapp.com/send?phone=60166018700&text=Hi%20Trapo%20Mid%20Valley%20South%20Key!'
    };

    // Return location-specific URL or default
    return whatsappMapping[locationName] || '#';
  }

  /**
   * Get all locations with their stock status (including out of stock)
   */
  getAllLocationsWithStock(stockData) {
    // Only use locations from API response - don't add extra hardcoded locations
    const locationMap = new Map();
    
    // Add locations from API response (both with stock and without stock)
    if (stockData.data && Array.isArray(stockData.data)) {
      stockData.data.forEach(stock => {
        locationMap.set(stock.location, {
          location: stock.location,
          quantity: stock.quantity || 0,
          hasStock: stock.quantity > 0
        });
      });
    }

    // Convert to array and sort (in stock first, then alphabetically)
    return Array.from(locationMap.values()).sort((a, b) => {
      if (a.quantity > 0 && b.quantity === 0) return -1;
      if (a.quantity === 0 && b.quantity > 0) return 1;
      return a.location.localeCompare(b.location);
    });
  }

  /**
   * Generate HTML when no stock is found
   */
  generateNoStockHTML(stockData) {
    // Even when no stock is found, show all locations with out of stock status
    return this.generateStockHTML({
      ...stockData,
      data: [], // No stock data
      found: false
    });
  }

  /**
   * Generate color information HTML
   */
  generateColorInfo(colors) {
    if (!colors || (!colors.base && !colors.lining)) {
      return '';
    }

    let html = '<div class="product-colors">';
    if (colors.base) {
      html += `<span class="color-info">Base: ${colors.base}</span>`;
    }
    if (colors.lining) {
      html += `<span class="color-info">Lining: ${colors.lining}</span>`;
    }
    html += '</div>';

    return html;
  }

  /**
   * Get stock status CSS class based on quantity
   */
  getStockStatusClass(quantity) {
    if (quantity <= 0) return 'out-of-stock';
    if (quantity < 5) return 'limited-stock';  // Changed from <= 2 to < 5
    return 'available';
  }

  /**
   * Get stock status text based on quantity
   */
  getStockStatusText(quantity) {
    if (quantity <= 0) return 'OUT OF STOCK';
    if (quantity < 5) return 'LIMITED STOCK';  // Changed from <= 2 to < 5
    return 'AVAILABLE';
  }

  /**
   * Show loading state
   */
  showLoading(container) {
    container.innerHTML = `
      <div class="ready-stock-loading">
        <div class="loading-spinner"></div>
        <span>${this.config.loadingText}</span>
      </div>
    `;
    container.classList.add('loading');
  }

  /**
   * Show no stock state
   */
  showNoStock(container) {
    container.innerHTML = `
      <div class="ready-stock-no-stock">
        <span>üì¶ ${this.config.noStockText}</span>
      </div>
    `;
    container.classList.add('no-stock');
  }

  /**
   * Show error state
   */
  showError(container) {
    container.innerHTML = `
      <div class="ready-stock-error">
        <span>‚ö†Ô∏è ${this.config.errorText}</span>
      </div>
    `;
    container.classList.add('error');
  }

  /**
   * Utility function for delays
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Dispatch custom events
   */
  dispatchEvent(eventName, detail) {
    const event = new CustomEvent(`readyStock:${eventName}`, { detail });
    document.dispatchEvent(event);
  }

  /**
   * Logging utility
   */
  log(message) {
    if (this.config.enableDebug) {
      console.log(`[ReadyStock] ${message}`);
    }
  }

  /**
   * Public method to refresh stock data
   */
  async refresh() {
    const sku = this.getProductSKU();
    const container = document.querySelector(this.config.containerSelector);
    
    if (sku && container) {
      // Clear cache for this SKU
      this.cache.delete(`stock_${sku}`);
      await this.loadStockData(sku, container);
    }
  }

  /**
   * Public method to clear all cache
   */
  clearCache() {
    this.cache.clear();
    this.log('Cache cleared');
  }
}

// Auto-initialize if not in module environment
if (typeof module === 'undefined') {
  // Wait for page load and initialize
  window.ReadyStockDisplay = ReadyStockDisplay;
  
  // Auto-initialize with default config
  document.addEventListener('DOMContentLoaded', () => {
    if (!window.readyStockInstance) {
      window.readyStockInstance = new ReadyStockDisplay({
        enableDebug: true // Enable debug in development
      });
    }
  });
}

// Export for module environments
if (typeof module !== 'undefined' && module.exports) {
  module.exports = ReadyStockDisplay;
}

</script>
<style>
    .container.breadcrumb-container-page{
    display:none;
    }
   .highlignt_sec {
    margin: 50px 0;
}
.sec_header_2 {
    text-align: center;
    background: linear-gradient(180deg, rgba(222, 222, 222, 0) 35.15%, rgba(222, 222, 222, 0.7) 100%);
    margin-bottom: 37px;
}
.sec_header_2 .title {
    width: fit-content;
    margin: 0 auto;
    position: relative;
    z-index: 9;
    padding: 0;
    padding-inline: 60px;
    font-size: 20px;
    color: #fff;
    text-transform: uppercase;
    height: 45px;
    display: flex;
    align-items: center;
    font-weight: 600;
    letter-spacing: 3px;
    width: 300px;
    justify-content: center;
}
.sec_header_2 .title:before {
    height: 45px;
    content: '';
    position: absolute;
    width: 100%;
    left: 0;
    top: 0;
    background-image: url(https://cdn.shopify.com/s/files/1/0234/7089/9277/files/title_bg.svg?v=1725982901);
    z-index: -1;
    background-position: center;
    background-repeat: no-repeat;
    background-size: 260px;
}
.sec_header_2 .title span {
    margin-bottom: -6px;
}
.ready-stock-container{
    max-width: 850px;
    width: 100%;
    margin: 0 auto;
    padding:0 15px;
}

/* Main container styling */
.ready-stock-display {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  max-width: 600px;
  margin: 0 auto;
  padding: 0;
  background: transparent;
}

/* Hide the stock title to match screenshot */
.stock-title {
  display: none;
}

/* Stock locations container */
.stock-locations {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

/* Loading state */
.ready-stock-loading {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 15px;
  background: #f8f9fa;
  border-radius: 8px;
  color: #6c757d;
}

.loading-spinner {
  width: 20px;
  height: 20px;
  border: 2px solid #e9ecef;
  border-top: 2px solid #007bff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Main stock display */
.ready-stock-display {
  background: transparent;
  border: none;
  box-shadow: none;
}

.stock-title {
  display: none; /* Hide the title to match screenshot */
}

/* Stock locations container */
.stock-locations {
  padding: 0;
  background: transparent;
}

/* Individual location - Card-based design matching screenshot */
.stock-location {
  margin: 0 0 16px 0;
  padding: 20px 24px;
  background: #F8F8F8;
  border: 1px solid #F8F8F8;
  border-radius: 12px;
  box-shadow: 2px 2px 4px 0px rgba(0, 0, 0, 0.25);
  transition: none;
}

/* Location header */
.location-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.location-name {
  font-weight: 600;
  font-size: 18px;
  color: #1B3D6D;
  display: flex;
  align-items: center;
  gap: 8px;
  line-height: 1.2;
}

.whatsapp-icon {
  display: inline-block;
  margin-left: 0;
  vertical-align: middle;
  text-decoration: none;
  transition: opacity 0.2s ease;
}

.whatsapp-icon:hover {
  opacity: 0.8;
}

.whatsapp-icon img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

/* Stock status badges matching screenshot */
.stock-status-badge {
  padding: 6px 16px;
  border-radius: 6px;
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  white-space: nowrap;
}

.stock-status-badge.available {
  color: #003A70;
}

.stock-status-badge.limited-stock {
  color: #E82276;
}

.stock-status-badge.out-of-stock {
  color: #808080;
}

/* Store hours */
.store-hours {
  font-size: 14px;
  color: #414042;
  margin-top: 2px;
  font-weight: 400;
      line-height: normal;
}

/* Stock status */
.stock-status {
  display: inline-flex;
  align-items: center;
  padding: 6px 12px;
  border-radius: 6px;
  font-size: 13px;
  font-weight: 500;
}

.stock-status.in-stock {
  background: #d4edda;
  color: #155724;
}

.stock-status.low-stock {
  background: #fff3cd;
  color: #856404;
}

.stock-status.out-of-stock {
  background: #f8d7da;
  color: #721c24;
}

/* Stock updated timestamp */
.stock-updated {
  padding: 12px 20px;
  background: #f8f9fa;
  color: #6c757d;
  font-size: 12px;
  text-align: center;
  border-top: 1px solid #e9ecef;
}

/* Hide stock summary and updated timestamp to match screenshot */
.stock-summary,
.stock-updated {
  display: none;
}

/* No stock found state */
.no-stock-found {
  text-align: center;
}

.no-stock-message {
  padding: 30px 20px;
}

.sku-info {
  margin: 15px 0;
  font-family: 'Courier New', monospace;
  background: #f8f9fa;
  padding: 8px 12px;
  border-radius: 4px;
  display: inline-block;
  font-size: 14px;
  color: #495057;
}

.stock-note {
  margin-top: 20px;
  color: #6c757d;
  font-size: 14px;
  line-height: 1.5;
  max-width: 400px;
  margin-left: auto;
  margin-right: auto;
}

/* No stock state */
.ready-stock-no-stock {
  text-align: center;
  padding: 30px 20px;
  color: #6c757d;
  font-size: 16px;
}

/* Error state */
.ready-stock-error {
  text-align: center;
  padding: 30px 20px;
  color: #dc3545;
  background: #f8d7da;
  border-radius: 8px;
  font-size: 16px;
}

/* Responsive design */
@media (max-width: 768px) {
  .ready-stock-container {
    margin: 15px 0;
  }
  
  .location-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
  
  .stock-quantity {
    align-self: flex-start;
  }
  
  .product-colors {
    flex-direction: column;
    gap: 4px;
  }
  
  .stock-title {
    padding: 14px 16px;
    font-size: 16px;
  }
  
  .stock-location {
    padding: 16px;
  }
}

@media (max-width: 480px) {
  .ready-stock-display {
    border-radius: 8px;
  }
  
  .stock-title {
    padding: 12px 14px;
    font-size: 15px;
  }
  
  .stock-location {
    padding: 14px;
  }
  
  .location-name {
    font-size: 15px;
  }
  
  .stock-quantity {
    font-size: 13px;
    padding: 3px 10px;
  }
}

/* Animation for stock loaded */
.ready-stock-container.stock-loaded .ready-stock-display {
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Custom scrollbar for mobile */
@media (max-width: 768px) {
  .stock-locations {
    max-height: 400px;
    overflow-y: auto;
  }
  
  .stock-locations::-webkit-scrollbar {
    width: 4px;
  }
  
  .stock-locations::-webkit-scrollbar-track {
    background: #f1f1f1;
  }
  
  .stock-locations::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 2px;
  }
  
  .stock-locations::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }
}

/* Print styles */
@media print {
  .ready-stock-display {
    box-shadow: none;
    border: 1px solid #000;
  }
  
  .stock-title {
    background: #000 !important;
    color: #fff !important;
  }
  
  .loading-spinner {
    display: none;
  }
}

</style>